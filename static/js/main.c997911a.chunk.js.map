{"version":3,"sources":["Component/Page lazy /^/.//.*$/ groupOptions: {} namespace object","routeConfig.js","Component/Common/AppLoading/index.js","Component/Common/AppHeader/index.js","App.js","serviceWorker.js","index.js","Component/Page/NotFound/index.js"],"names":["map","./NotFound","./NotFound/","./NotFound/index","./NotFound/index.js","./NotFound/index.module.scss","./Search","./Search/","./Search/RepoCard","./Search/RepoCard/","./Search/RepoCard/index","./Search/RepoCard/index.js","./Search/SearchArea","./Search/SearchArea/","./Search/SearchArea/index","./Search/SearchArea/index.js","./Search/SearchArea/index.module.scss","./Search/index","./Search/index.js","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","t","resolve","Error","code","keys","Object","module","exports","pageName","AppLoading","props","react_default","a","createElement","routeConfig","page","path","component","Loadable","loader","concat","loading","AppHeader","_ref","name","link","className","role","aria-label","href","App","HashRouter","Common_AppHeader","Switch","Route","exact","render","Redirect","to","route","key","NoFoundPage","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","NotFound","_ref$message","message","data-role"],"mappings":"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","file":"static/js/main.c997911a.chunk.js","sourcesContent":["var map = {\n\t\"./NotFound\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./NotFound/\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./NotFound/index\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./NotFound/index.js\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./NotFound/index.module.scss\": [\n\t\t34,\n\t\t7,\n\t\t7\n\t],\n\t\"./Search\": [\n\t\t10,\n\t\t9,\n\t\t0,\n\t\t1\n\t],\n\t\"./Search/\": [\n\t\t10,\n\t\t9,\n\t\t0,\n\t\t1\n\t],\n\t\"./Search/RepoCard\": [\n\t\t8,\n\t\t9,\n\t\t3\n\t],\n\t\"./Search/RepoCard/\": [\n\t\t8,\n\t\t9,\n\t\t3\n\t],\n\t\"./Search/RepoCard/index\": [\n\t\t8,\n\t\t9,\n\t\t3\n\t],\n\t\"./Search/RepoCard/index.js\": [\n\t\t8,\n\t\t9,\n\t\t3\n\t],\n\t\"./Search/SearchArea\": [\n\t\t9,\n\t\t9,\n\t\t2\n\t],\n\t\"./Search/SearchArea/\": [\n\t\t9,\n\t\t9,\n\t\t2\n\t],\n\t\"./Search/SearchArea/index\": [\n\t\t9,\n\t\t9,\n\t\t2\n\t],\n\t\"./Search/SearchArea/index.js\": [\n\t\t9,\n\t\t9,\n\t\t2\n\t],\n\t\"./Search/SearchArea/index.module.scss\": [\n\t\t32,\n\t\t7,\n\t\t8\n\t],\n\t\"./Search/index\": [\n\t\t10,\n\t\t9,\n\t\t0,\n\t\t1\n\t],\n\t\"./Search/index.js\": [\n\t\t10,\n\t\t9,\n\t\t0,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 28;\nmodule.exports = webpackAsyncContext;","import Loadable from 'react-loadable'\nimport AppLoading from './Component/Common/AppLoading'\n\nconst lazyloadComponent = (pageName) => (\n  Loadable({\n    loader: () => import(`./Component/Page/${pageName}`),\n    loading: AppLoading\n  })\n)\n\nconst routeConfig = [\n  {\n    page: 'search',\n    path: '/search',\n    component: lazyloadComponent('Search')\n  }\n]\n\nexport default routeConfig\n","import React from 'react'\n\nconst AppLoading = (props) => {\n  return (\n    <div>loading</div>\n  )\n}\n\nexport default AppLoading\n","import React from 'react'\n\nconst AppHeader = ({ name, link }) => {\n  return (\n    <nav className='navbar is-primary' role='navigation' aria-label='main navigation'>\n      <div className='navbar-brand'>\n        <a className='navbar-item' href={link}>\n          {name}\n        </a>\n      </div>\n    </nav>\n  )\n}\n\nexport default AppHeader\n","import React, { Component } from 'react'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport routeConfig from './routeConfig'\nimport AppHeader from './Component/Common/AppHeader'\nimport NoFoundPage from './Component/Page/NotFound'\nimport 'bulma/css/bulma.min.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <HashRouter>\n        <div className='App'>\n          <AppHeader\n            name='Test App'\n            link='https://sky172839465.github.io/test-app'\n          />\n          <section className='section'>\n            <div className='container is-fluid'>\n              <Switch>\n                <Route exact path='/' render={() => <Redirect to={routeConfig[0].path} />} />\n                {routeConfig.map(route => {\n                  return <Route\n                    path={route.path}\n                    component={route.component}\n                    key={route.page}\n                  />\n                })}\n                <Route component={NoFoundPage} />\n              </Switch>\n            </div>\n          </section>\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\n\nconst NotFound = ({ message = 'Oops! Not found page.' }) => {\n  return (\n    <div\n      data-role='not-found'\n      className='is-size-3 has-text-centered'\n    >\n      {message}\n    </div>\n  )\n}\n\nexport default NotFound\n"],"sourceRoot":""}